<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nocl.studentmanager.database.dao.StudentInfoDAO">
    <select id="getStudentInfo" resultType="com.nocl.studentmanager.database.bean.Student">
        SELECT
            Student.uid,
            Student.name,
            Student.age,
            Student.gender,
            Student.addr,
            Academy.name as academy,
            Specialized.name as specialized,
            StudentClass.name as studentClass
        FROM Student
                 JOIN Academy ON Student.academy = Academy.id
                 JOIN Specialized ON Student.specialized = Specialized.id
                 JOIN StudentClass ON Student.studentClass = StudentClass.id
        <where>
            <if test="student != null">
                <if test="student.name != null">
                    AND Student.name = #{name}
                </if>
                <if test="student.age != null">
                    AND age = #{age}
                </if>
                <if test="student.gender != null">
                    AND gender = #{gender}
                </if>
                <if test="student.academy != null">
                    AND Academy.name = #{academy}
                </if>
                <if test="student.specialized != null">
                    AND Specialized.name = #{specialized}
                </if>
                <if test="student.studentClass != null">
                    AND StudentClass.name = #{studentClass}
                </if>
            </if>
        </where>
        order by Student.uid
    </select>
    <select id="getTreeList" parameterType="com.nocl.studentmanager.database.bean.Student">
        select * from (
            SELECT
                Student.uid,
                Student.name,
                Student.age,
                Student.gender,
                Student.addr,
                Academy.name as academy,
                Specialized.name as specialized,
                StudentClass.name as studentClass
            FROM Student
                JOIN Academy ON Student.academy = Academy.id
                JOIN Specialized ON Student.specialized = Specialized.id
                JOIN StudentClass ON Student.studentClass = StudentClass.id) as temp
        where CONCAT(academy,specialized,studentClass) LIKE #{name}
        order by uid
    </select>
    <insert id="insertStudent" useGeneratedKeys="true">
        insert into Student VALUES (null, '${Name}', '${Age}', '${Gender}', '${Addr}', (select id from Academy where `name` = '${Academy}'), (select id from Specialized where `name` = '${Specialized}'), (select id from StudentClass where `name` = '${StudentClass}'))
    </insert>
    <select id="getAcademy" parameterType="java.lang.String">
        select name from Academy
    </select>
    <select id="getSpecialized" parameterType="java.lang.String">
        select Specialized.name from Specialized
            join Academy on Specialized.academyId = Academy.id
            <where>
                <if test="name == null">
                </if>
                <if test="name != null">
                    Academy.name = #{name}
                </if>
            </where>
    </select>
    <select id="getStudentClass" parameterType="java.lang.String">
        select StudentClass.name from StudentClass
            join Specialized on StudentClass.specializedId = Specialized.id
            <where>
                <if test="name != null">
                    Specialized.name = #{name}
                </if>
            </where>
    </select>
    <select id="getAcademyOfStudentClass" parameterType="java.lang.String">
        SELECT 
            StudentClass.name
            FROM Academy
            JOIN Specialized ON Specialized.academyId = Academy.id
            JOIN StudentClass ON StudentClass.specializedId = Specialized.id
            <where>
                <if test="data == 1">
                    Academy.name = #{name}
                </if>
                <if test="data == 0">
                </if>
            </where>
    </select>
    <select id="getSpecializedOfAcademy" parameterType="java.lang.String">
        SELECT
        DISTINCT Academy.name
        FROM Academy
        JOIN Specialized ON Specialized.academyId = Academy.id
        JOIN StudentClass ON StudentClass.specializedId = Specialized.id
        <where>
                Specialized.name = #{name}
        </where>
    </select>
    <select id="getStudentClassOfSpecialized" parameterType="java.lang.String">
        SELECT
        DISTINCT Specialized.name
        FROM Academy
        JOIN Specialized ON Specialized.academyId = Academy.id
        JOIN StudentClass ON StudentClass.specializedId = Specialized.id
        <where>
            StudentClass.name = #{name}
        </where>
    </select>
    <select id="getStudentClassOfAcademy" parameterType="java.lang.String">
        SELECT
        DISTINCT Academy.name
        FROM Academy
        JOIN Specialized ON Specialized.academyId = Academy.id
        JOIN StudentClass ON StudentClass.specializedId = Specialized.id
        <where>
            StudentClass.name = #{name}
        </where>
    </select>
    <select id="getAllSpecialized" parameterType="java.lang.String">
        select name from Specialized
    </select>
    <select id="getAllStudentClass" parameterType="java.lang.String">
        select name from StudentClass
    </select>
    <select id="getStudentInfoCount" parameterType="java.lang.Integer">
        select count(*) from Student
    </select>
    <delete id="deleteStudentInfo">
        delete from Student where uid = #{uid}
    </delete>
    <update id="updateStudentAcademy">
        UPDATE Student SET academy = #{academyName} WHERE uid = #{uid};
    </update>
    <update id="updateStudentSpecialized">
        update Student set specialized = #{specializedName} where uid = #{uid}
    </update>
    <update id="updateStudentClass">
        update Student set studentClass = #{studentClassName} where uid = #{uid}
    </update>
    <update id="updateStudentGender">
        update Student set gender = #{gender} where uid = #{uid}
    </update>
    <select id="getAcademyUid" parameterType="java.lang.String" resultType="java.lang.Integer">
        select id from Academy where name = #{name}
    </select>
    <select id="getSpecializedUid" parameterType="java.lang.String" resultType="java.lang.Integer">
        select id from Specialized where name = #{name}
    </select>
    <select id="getStudentClassUid" parameterType="java.lang.String" resultType="java.lang.Integer">
        select id from StudentClass where name = #{name}
    </select>
</mapper>